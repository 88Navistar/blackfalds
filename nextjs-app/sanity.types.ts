/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Acknowledgement = {
  _type: "acknowledgement";
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<
      | {
          citation?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "source";
          };
          _type: "citation";
          _key: string;
        }
      | {
          linkType?:
            | "href"
            | "staticpage"
            | "project"
            | "resourcePage"
            | "mail";
          href?: string;
          staticpage?: "/" | "/about" | "/contact" | "/projects";
          project?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          resourcePage?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "resourcePage";
          };
          mail?: string;
          openInNewTab?: boolean;
          _type: "link";
          _key: string;
        }
    >;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type TextWrapImage = {
  _type: "textWrapImage";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  };
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<
      | {
          citation?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "source";
          };
          _type: "citation";
          _key: string;
        }
      | {
          linkType?:
            | "href"
            | "staticpage"
            | "project"
            | "resourcePage"
            | "mail";
          href?: string;
          staticpage?: "/" | "/about" | "/contact" | "/projects";
          project?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          resourcePage?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "resourcePage";
          };
          mail?: string;
          openInNewTab?: boolean;
          _type: "link";
          _key: string;
        }
    >;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  alignment?: "left" | "right";
  width?: "small" | "medium" | "large";
};

export type ModuleBlock = {
  _type: "moduleBlock";
  title?: string;
  subtitle?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<
      | {
          citation?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "source";
          };
          _type: "citation";
          _key: string;
        }
      | {
          linkType?:
            | "href"
            | "staticpage"
            | "project"
            | "resourcePage"
            | "mail";
          href?: string;
          staticpage?: "/" | "/about" | "/contact" | "/projects";
          project?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          resourcePage?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "resourcePage";
          };
          mail?: string;
          openInNewTab?: boolean;
          _type: "link";
          _key: string;
        }
    >;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type FullWidthImage = {
  _type: "fullWidthImage";
  title?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  caption?: string;
};

export type Books = {
  _id: string;
  _type: "books";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<
      | {
          citation?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "source";
          };
          _type: "citation";
          _key: string;
        }
      | {
          linkType?:
            | "href"
            | "staticpage"
            | "project"
            | "resourcePage"
            | "mail";
          href?: string;
          staticpage?: "/" | "/about" | "/contact" | "/projects";
          project?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          resourcePage?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "resourcePage";
          };
          mail?: string;
          openInNewTab?: boolean;
          _type: "link";
          _key: string;
        }
    >;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  books?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "book";
  }>;
};

export type SourceGroup = {
  _type: "sourceGroup";
  title?: string;
  sources?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "source";
  }>;
};

export type CallToAction = {
  _type: "callToAction";
  heading?: string;
  text?: string;
  buttonText?: string;
  link?: Link;
};

export type Link = {
  _type: "link";
  linkType?: "href" | "staticpage" | "resourcePage" | "mail" | "post";
  href?: string;
  staticpage?: "/" | "/about" | "/contact" | "/projects";
  resourcePage?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "resourcePage";
  };
  mail?: string;
  project?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  openInNewTab?: boolean;
};

export type InfoSection = {
  _type: "infoSection";
  heading?: string;
  subheading?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<
      | {
          citation?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "source";
          };
          _type: "citation";
          _key: string;
        }
      | {
          linkType?:
            | "href"
            | "staticpage"
            | "project"
            | "resourcePage"
            | "mail";
          href?: string;
          staticpage?: "/" | "/about" | "/contact" | "/projects";
          project?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          resourcePage?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "resourcePage";
          };
          mail?: string;
          openInNewTab?: boolean;
          _type: "link";
          _key: string;
        }
    >;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type IndigenousTranslationBlock = {
  _type: "indigenousTranslationBlock";
  heading?: string;
  description?: string;
  translations?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "indigenousTranslation";
  }>;
};

export type IndigenousTranslation = {
  _id: string;
  _type: "indigenousTranslation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  languageGroup?: {
    name?: string;
    nativeName?: string;
    meaning?: string;
    translator?: string;
  };
  translations?: Array<{
    english?: string;
    indigenous?: string;
    _key: string;
  }>;
};

export type HistoricalFact = {
  _id: string;
  _type: "historicalFact";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  year?: number;
  title?: string;
  snippet?: string;
};

export type HeroBlock = {
  _type: "heroBlock";
  hero?: {
    type?: "fullWidth" | "halfWidth" | "video";
    fullWidth?: {
      title?: string;
      tagline?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
    };
    halfWidth?: {
      title?: string;
      tagline?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
    };
    video?: {
      title?: string;
      tagline?: string;
    };
  };
};

export type CitationMark = {
  _type: "citationMark";
  citation?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "source";
  };
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<
    | {
        citation?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "source";
        };
        _type: "citation";
        _key: string;
      }
    | {
        linkType?: "href" | "staticpage" | "project" | "resourcePage" | "mail";
        href?: string;
        staticpage?: "/" | "/about" | "/contact" | "/projects";
        project?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        resourcePage?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "resourcePage";
        };
        mail?: string;
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
      }
  >;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Book = {
  _id: string;
  _type: "book";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  content?: BlockContent;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type HomePageSingleton = {
  _id: string;
  _type: "homePageSingleton";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hero?: Array<
    {
      _key: string;
    } & HeroBlock
  >;
  carouselOne?: CarouselOne;
  historicalFacts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "historicalFact";
  }>;
};

export type CarouselOne = {
  _type: "carouselOne";
  title?: string;
  description?: string;
  size?: "one" | "two" | "three";
  indicators?: "none" | "dots" | "count";
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
};

export type ContactPage = {
  _id: string;
  _type: "contactPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  content?: BlockContent;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type AboutPage = {
  _id: string;
  _type: "aboutPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  content?: BlockContent;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  featured?: boolean;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  modules?: Array<
    | ({
        _key: string;
      } & ModuleBlock)
    | ({
        _key: string;
      } & FullWidthImage)
    | ({
        _key: string;
      } & TextWrapImage)
    | ({
        _key: string;
      } & CarouselOne)
    | ({
        _key: string;
      } & Acknowledgement)
    | {
        title?: string;
        slug?: Slug;
        content?: BlockContent;
        books?: Array<{
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          _key: string;
          [internalGroqTypeReferenceTo]?: "book";
        }>;
        _type: "books";
        _key: string;
      }
    | {
        title?: string;
        content?: BlockContent;
        image?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        };
        _type: "book";
        _key: string;
      }
  >;
  excerpt?: string;
  date?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName?: string;
  lastName?: string;
  picture?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type ResourcePage = {
  _id: string;
  _type: "resourcePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  heading?: string;
  subheading?: string;
  pageBuilder?: Array<
    | ({
        _key: string;
      } & CallToAction)
    | ({
        _key: string;
      } & InfoSection)
    | ({
        _key: string;
      } & SourceGroup)
    | ({
        _key: string;
      } & IndigenousTranslationBlock)
  >;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Source = {
  _id: string;
  _type: "source";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  citationNumber?: number;
  author?: string;
  title?: string;
  publicationDetails?: string;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<
    {
      _key: string;
    } & SanityAssistInstructionTask
  >;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<
    {
      _key: string;
    } & SanityAssistSchemaTypeField
  >;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<
    | {
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }
    | ({
        _key: string;
      } & SanityAssistInstructionFieldRef)
    | ({
        _key: string;
      } & SanityAssistInstructionContext)
    | ({
        _key: string;
      } & SanityAssistInstructionUserInput)
  >;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<
    | ({
        _key: string;
      } & SanityAssistOutputField)
    | ({
        _key: string;
      } & SanityAssistOutputType)
  >;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<
    {
      _key: string;
    } & SanityAssistInstruction
  >;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Acknowledgement
  | TextWrapImage
  | ModuleBlock
  | FullWidthImage
  | Books
  | SourceGroup
  | CallToAction
  | Link
  | InfoSection
  | IndigenousTranslationBlock
  | IndigenousTranslation
  | HistoricalFact
  | HeroBlock
  | CitationMark
  | BlockContent
  | Book
  | HomePageSingleton
  | CarouselOne
  | Settings
  | ContactPage
  | AboutPage
  | Post
  | Person
  | ResourcePage
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Category
  | Slug
  | Source
  | SanityAssistInstructionTask
  | SanityAssistTaskStatus
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistOutputType
  | SanityAssistOutputField
  | SanityAssistInstructionContext
  | AssistInstructionContext
  | SanityAssistInstructionUserInput
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionFieldRef
  | SanityAssistInstruction
  | SanityAssistSchemaTypeField;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
} | null;
// Variable: aboutPageQuery
// Query: *[_type == "aboutPage"][0] {    ...,    title,    description,    "content": content[]{          ...,          markDefs[]{            ...,              _type == "link" => {    "resourcePage": resourcePage->slug.current,    "project": post->slug.current,    "href": href,    "staticpage": staticpage,    "mail": mail,    "openInNewTab": openInNewTab  },              _type == "citation" => {    ...,    citation-> {      ...,      _id,      citationNumber,      title    }  },          }        }  }
export type AboutPageQueryResult = {
  _id: string;
  _type: "aboutPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  description: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<
      | {
          citation: {
            _id: string;
            _type: "source";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            citationNumber: number | null;
            author?: string;
            title: string | null;
            publicationDetails?: string;
          } | null;
          _type: "citation";
          _key: string;
        }
      | {
          linkType?:
            | "href"
            | "mail"
            | "project"
            | "resourcePage"
            | "staticpage";
          href: string | null;
          staticpage: "/" | "/about" | "/contact" | "/projects" | null;
          project: null;
          resourcePage: string | null;
          mail: string | null;
          openInNewTab: boolean | null;
          _type: "link";
          _key: string;
        }
    > | null;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;
// Variable: contactPageQuery
// Query: *[_type == "contactPage"][0] {    ...,    title,    description,    "content": content[]{      ...,      markDefs[]{        ...,          _type == "link" => {    "resourcePage": resourcePage->slug.current,    "project": post->slug.current,    "href": href,    "staticpage": staticpage,    "mail": mail,    "openInNewTab": openInNewTab  },          _type == "citation" => {    ...,    citation-> {      ...,      _id,      citationNumber,      title    }  },      }    },    image {        ...,  "asset": asset {    _ref,    _type,    _type == 'reference' => @-> {      url,      mimeType,      metadata {        lqip,        dimensions {          width,          height,          aspectRatio        }      }    }  }    }  }
export type ContactPageQueryResult = {
  _id: string;
  _type: "contactPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  description: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<
      | {
          citation: {
            _id: string;
            _type: "source";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            citationNumber: number | null;
            author?: string;
            title: string | null;
            publicationDetails?: string;
          } | null;
          _type: "citation";
          _key: string;
        }
      | {
          linkType?:
            | "href"
            | "mail"
            | "project"
            | "resourcePage"
            | "staticpage";
          href: string | null;
          staticpage: "/" | "/about" | "/contact" | "/projects" | null;
          project: null;
          resourcePage: string | null;
          mail: string | null;
          openInNewTab: boolean | null;
          _type: "link";
          _key: string;
        }
    > | null;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  image: {
    asset: {
      _ref: string;
      _type: "reference";
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
          aspectRatio: number | null;
        } | null;
      } | null;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
} | null;
// Variable: homePageSingletonQuery
// Query: *[_type == "homePageSingleton"][0] {    "hero": hero[0] {      _type,      hero {        type,        fullWidth {          title,          tagline,          image {              ...,  "asset": asset {    _ref,    _type,    _type == 'reference' => @-> {      url,      mimeType,      metadata {        lqip,        dimensions {          width,          height,          aspectRatio        }      }    }  }          }        },        halfWidth {          title,          tagline,          image {              ...,  "asset": asset {    _ref,    _type,    _type == 'reference' => @-> {      url,      mimeType,      metadata {        lqip,        dimensions {          width,          height,          aspectRatio        }      }    }  }          }        },        video {          title,          tagline,          thumbnail {              ...,  "asset": asset {    _ref,    _type,    _type == 'reference' => @-> {      url,      mimeType,      metadata {        lqip,        dimensions {          width,          height,          aspectRatio        }      }    }  }          }        }      }    },    "carouselOne": carouselOne {      ...,        _type,        size,        indicators,        images[]{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    },    "historicalFacts": historicalFacts[]-> {      _id,      year,      title,      snippet    }  }
export type HomePageSingletonQueryResult = {
  hero: {
    _type: "heroBlock";
    hero: {
      type: "fullWidth" | "halfWidth" | "video" | null;
      fullWidth: {
        title: string | null;
        tagline: string | null;
        image: {
          asset: {
            _ref: string;
            _type: "reference";
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
                aspectRatio: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        } | null;
      } | null;
      halfWidth: {
        title: string | null;
        tagline: string | null;
        image: {
          asset: {
            _ref: string;
            _type: "reference";
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
                aspectRatio: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        } | null;
      } | null;
      video: {
        title: string | null;
        tagline: string | null;
        thumbnail: null;
      } | null;
    } | null;
  } | null;
  carouselOne: {
    _type: "carouselOne";
    title?: string;
    description?: string;
    size: "one" | "three" | "two" | null;
    indicators: "count" | "dots" | "none" | null;
    images: Array<{
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
    }> | null;
  } | null;
  historicalFacts: Array<{
    _id: string;
    year: number | null;
    title: string | null;
    snippet: string | null;
  }> | null;
} | null;
// Variable: getResourcePageQuery
// Query: *[_type == 'resourcePage' && slug.current == $slug][0]{    _id,    _type,    name,    slug,    heading,    subheading,    "pageBuilder": pageBuilder[]{      ...,      _type == "callToAction" => {          link {      ...,        _type == "link" => {    "resourcePage": resourcePage->slug.current,    "project": post->slug.current,    "href": href,    "staticpage": staticpage,    "mail": mail,    "openInNewTab": openInNewTab  }      },      },      _type == "infoSection" => {        content[]{          ...,          markDefs[]{            ...,              _type == "link" => {    "resourcePage": resourcePage->slug.current,    "project": post->slug.current,    "href": href,    "staticpage": staticpage,    "mail": mail,    "openInNewTab": openInNewTab  },              _type == "citation" => {    ...,    citation-> {      ...,      _id,      citationNumber,      title    }  },          }        }      },      _type == "sourceGroup" => {        ...,        sources[]->{          ...,          _type == "source" => {            ...,          }        }      },      _type == "indigenousTranslationBlock" => {        _type,        _key,        heading,        description,        translations[]-> {          _type,          languageGroup {            name,            nativeName,            meaning,            translator          },          translations[] {            english,            indigenous          }        }      },    },  }
export type GetResourcePageQueryResult = {
  _id: string;
  _type: "resourcePage";
  name: string | null;
  slug: Slug | null;
  heading: string | null;
  subheading: string | null;
  pageBuilder: Array<
    | {
        _key: string;
        _type: "callToAction";
        heading?: string;
        text?: string;
        buttonText?: string;
        link: {
          _type: "link";
          linkType?: "href" | "mail" | "post" | "resourcePage" | "staticpage";
          href: string | null;
          staticpage: "/" | "/about" | "/contact" | "/projects" | null;
          resourcePage: string | null;
          mail: string | null;
          project: null;
          openInNewTab: boolean | null;
        } | null;
      }
    | {
        _key: string;
        _type: "indigenousTranslationBlock";
        heading: string | null;
        description: string | null;
        translations: Array<{
          _type: "indigenousTranslation";
          languageGroup: {
            name: string | null;
            nativeName: string | null;
            meaning: string | null;
            translator: string | null;
          } | null;
          translations: Array<{
            english: string | null;
            indigenous: string | null;
          }> | null;
        }> | null;
      }
    | {
        _key: string;
        _type: "infoSection";
        heading?: string;
        subheading?: string;
        content: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?:
            | "blockquote"
            | "h1"
            | "h2"
            | "h3"
            | "h4"
            | "h5"
            | "h6"
            | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                citation: {
                  _id: string;
                  _type: "source";
                  _createdAt: string;
                  _updatedAt: string;
                  _rev: string;
                  citationNumber: number | null;
                  author?: string;
                  title: string | null;
                  publicationDetails?: string;
                } | null;
                _type: "citation";
                _key: string;
              }
            | {
                linkType?:
                  | "href"
                  | "mail"
                  | "project"
                  | "resourcePage"
                  | "staticpage";
                href: string | null;
                staticpage: "/" | "/about" | "/contact" | "/projects" | null;
                project: null;
                resourcePage: string | null;
                mail: string | null;
                openInNewTab: boolean | null;
                _type: "link";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
      }
    | {
        _key: string;
        _type: "sourceGroup";
        title?: string;
        sources: Array<{
          _id: string;
          _type: "source";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          citationNumber?: number;
          author?: string;
          title?: string;
          publicationDetails?: string;
        }> | null;
      }
  > | null;
} | null;
// Variable: sitemapData
// Query: *[    _type == "resourcePage" ||     _type == "post" ||     _type == "aboutPage" ||    _type == "contactPage" ||    _type == "homePageSingleton" ||    _type == "projectPage"  ] | order(_type asc) {    _type == "homePageSingleton" => {      "slug": "",      "_type": _type,      "_updatedAt": _updatedAt    },    _type == "aboutPage" => {      "slug": "about",      "_type": _type,      "_updatedAt": _updatedAt    },    _type == "contactPage" => {      "slug": "contact",      "_type": _type,      "_updatedAt": _updatedAt    },    _type == "projectPage" => {      "slug": "projects",      "_type": _type,      "_updatedAt": _updatedAt    },    _type in ["resourcePage", "post"] => {      "slug": slug.current,      "_type": _type,      "_updatedAt": _updatedAt    }  }
export type SitemapDataResult = Array<
  | {
      slug: "about";
      _type: "aboutPage";
      _updatedAt: string;
    }
  | {
      slug: "contact";
      _type: "contactPage";
      _updatedAt: string;
    }
  | {
      slug: "";
      _type: "homePageSingleton";
      _updatedAt: string;
    }
  | {
      slug: string | null;
      _type: "post";
      _updatedAt: string;
    }
  | {
      slug: string | null;
      _type: "resourcePage";
      _updatedAt: string;
    }
  | {}
>;
// Variable: allBooksQuery
// Query: *[_type == "books" && defined(slug.current == "all-books") ] {    title,    content[],    "books": books[]->{      ...,      image{        alt,        "asset": asset{          _ref,          _type == 'reference' => @-> {      url,      metadata {        dimensions {          width,          height,          aspectRatio        }      }    }        }      }    }  }
export type AllBooksQueryResult = Array<{
  title: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<
      | {
          citation?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "source";
          };
          _type: "citation";
          _key: string;
        }
      | {
          linkType?:
            | "href"
            | "mail"
            | "project"
            | "resourcePage"
            | "staticpage";
          href?: string;
          staticpage?: "/" | "/about" | "/contact" | "/projects";
          project?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          resourcePage?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "resourcePage";
          };
          mail?: string;
          openInNewTab?: boolean;
          _type: "link";
          _key: string;
        }
    >;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  books: Array<{
    _id: string;
    _type: "book";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    content?: BlockContent;
    image: {
      alt: string | null;
      asset: {
        _ref: string;
        url: string | null;
        metadata: {
          dimensions: {
            width: number | null;
            height: number | null;
            aspectRatio: number | null;
          } | null;
        } | null;
      } | null;
    } | null;
  }> | null;
}>;
// Variable: allPostsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage{    ...,    "asset": asset{    _ref,    _type,    _type == 'reference' => @->{      url,          mimeType,          metadata {              lqip,              dimensions {                width,                height,                aspectRatio              }      }    },      }  },  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  "category": category->{    name,    slug  },  "featured": featured,  }
export type AllPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      _ref: string;
      _type: "reference";
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
          aspectRatio: number | null;
        } | null;
      } | null;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: {
    name: string | null;
    slug: Slug | null;
  } | null;
  featured: boolean | null;
}>;
// Variable: featuredPostsQuery
// Query: *[_type == "post" && featured == true && defined(slug.current)] | order(date desc, _updatedAt desc) {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage{    ...,    "asset": asset{    _ref,    _type,    _type == 'reference' => @->{      url,          mimeType,          metadata {              lqip,              dimensions {                width,                height,                aspectRatio              }      }    },      }  },  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  "category": category->{    name,    slug  },  "featured": featured,  }
export type FeaturedPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      _ref: string;
      _type: "reference";
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
          aspectRatio: number | null;
        } | null;
      } | null;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: {
    name: string | null;
    slug: Slug | null;
  } | null;
  featured: boolean | null;
}>;
// Variable: morePostsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage{    ...,    "asset": asset{    _ref,    _type,    _type == 'reference' => @->{      url,          mimeType,          metadata {              lqip,              dimensions {                width,                height,                aspectRatio              }      }    },      }  },  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  "category": category->{    name,    slug  },  "featured": featured,  }
export type MorePostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      _ref: string;
      _type: "reference";
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
          aspectRatio: number | null;
        } | null;
      } | null;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: {
    name: string | null;
    slug: Slug | null;
  } | null;
  featured: boolean | null;
}>;
// Variable: muralMediaQuery
// Query: *[    _type == "post" &&     defined(slug.current) &&     _id != $skip &&    category->slug.current in ["mural-media", "iron-ridge-mural"]  ] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage{    ...,    "asset": asset{    _ref,    _type,    _type == 'reference' => @->{      url,          mimeType,          metadata {              lqip,              dimensions {                width,                height,                aspectRatio              }      }    },      }  },  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  "category": category->{    name,    slug  },  "featured": featured,  }
export type MuralMediaQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      _ref: string;
      _type: "reference";
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
          aspectRatio: number | null;
        } | null;
      } | null;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: {
    name: string | null;
    slug: Slug | null;
  } | null;
  featured: boolean | null;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage{    ...,    "asset": asset{    _ref,    _type,    _type == 'reference' => @->{      url,          mimeType,          metadata {              lqip,              dimensions {                width,                height,                aspectRatio              }      }    },      }  },  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  "category": category->{    name,    slug  },  "featured": featured,  modules[]{      ...,      _type == "moduleBlock" => {        _type,        content[]{          ...,          markDefs[]{            ...,              _type == "link" => {    "resourcePage": resourcePage->slug.current,    "project": post->slug.current,    "href": href,    "staticpage": staticpage,    "mail": mail,    "openInNewTab": openInNewTab  },              _type == "citation" => {    ...,    citation-> {      ...,      _id,      citationNumber,      title    }  },          }        }      },      _type == "fullWidthImage" => {        _type,        caption,        image{            ...,  "asset": asset {    _ref,    _type,    _type == 'reference' => @-> {      url,      mimeType,      metadata {        lqip,        dimensions {          width,          height,          aspectRatio        }      }    }  }        },      },      _type == "textWrapImage" => {        _type,        content[]{          ...,          markDefs[]{            ...,              _type == "link" => {    "resourcePage": resourcePage->slug.current,    "project": post->slug.current,    "href": href,    "staticpage": staticpage,    "mail": mail,    "openInNewTab": openInNewTab  },              _type == "citation" => {    ...,    citation-> {      ...,      _id,      citationNumber,      title    }  },          }        },        alignment,        image{            ...,  "asset": asset {    _ref,    _type,    _type == 'reference' => @-> {      url,      mimeType,      metadata {        lqip,        dimensions {          width,          height,          aspectRatio        }      }    }  }        },      },      _type == "carouselOne" => {        ...,        _type,        size,        indicators,        images[]{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },      },      }      }
export type PostQueryResult = {
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      _ref: string;
      _type: "reference";
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
          aspectRatio: number | null;
        } | null;
      } | null;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: {
    name: string | null;
    slug: Slug | null;
  } | null;
  featured: boolean | null;
  modules: Array<
    | {
        _key: string;
        _type: "acknowledgement";
        content?: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?:
            | "blockquote"
            | "h1"
            | "h2"
            | "h3"
            | "h4"
            | "h5"
            | "h6"
            | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<
            | {
                citation?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "source";
                };
                _type: "citation";
                _key: string;
              }
            | {
                linkType?:
                  | "href"
                  | "mail"
                  | "project"
                  | "resourcePage"
                  | "staticpage";
                href?: string;
                staticpage?: "/" | "/about" | "/contact" | "/projects";
                project?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "post";
                };
                resourcePage?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "resourcePage";
                };
                mail?: string;
                openInNewTab?: boolean;
                _type: "link";
                _key: string;
              }
          >;
          level?: number;
          _type: "block";
          _key: string;
        }>;
      }
    | {
        title?: string;
        content?: BlockContent;
        image?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        };
        _type: "book";
        _key: string;
      }
    | {
        title?: string;
        slug?: Slug;
        content?: BlockContent;
        books?: Array<{
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          _key: string;
          [internalGroqTypeReferenceTo]?: "book";
        }>;
        _type: "books";
        _key: string;
      }
    | {
        _key: string;
        _type: "carouselOne";
        title?: string;
        description?: string;
        size: "one" | "three" | "two" | null;
        indicators: "count" | "dots" | "none" | null;
        images: Array<{
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          alt: string | null;
        }> | null;
      }
    | {
        _key: string;
        _type: "fullWidthImage";
        title?: string;
        description?: string;
        image: {
          asset: {
            _ref: string;
            _type: "reference";
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
                aspectRatio: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        } | null;
        caption: string | null;
      }
    | {
        _key: string;
        _type: "moduleBlock";
        title?: string;
        subtitle?: string;
        content: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?:
            | "blockquote"
            | "h1"
            | "h2"
            | "h3"
            | "h4"
            | "h5"
            | "h6"
            | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                citation: {
                  _id: string;
                  _type: "source";
                  _createdAt: string;
                  _updatedAt: string;
                  _rev: string;
                  citationNumber: number | null;
                  author?: string;
                  title: string | null;
                  publicationDetails?: string;
                } | null;
                _type: "citation";
                _key: string;
              }
            | {
                linkType?:
                  | "href"
                  | "mail"
                  | "project"
                  | "resourcePage"
                  | "staticpage";
                href: string | null;
                staticpage: "/" | "/about" | "/contact" | "/projects" | null;
                project: null;
                resourcePage: string | null;
                mail: string | null;
                openInNewTab: boolean | null;
                _type: "link";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
      }
    | {
        _key: string;
        _type: "textWrapImage";
        image: {
          asset: {
            _ref: string;
            _type: "reference";
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
                aspectRatio: number | null;
              } | null;
            } | null;
          } | null;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          caption?: string;
          _type: "image";
        } | null;
        content: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?:
            | "blockquote"
            | "h1"
            | "h2"
            | "h3"
            | "h4"
            | "h5"
            | "h6"
            | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                citation: {
                  _id: string;
                  _type: "source";
                  _createdAt: string;
                  _updatedAt: string;
                  _rev: string;
                  citationNumber: number | null;
                  author?: string;
                  title: string | null;
                  publicationDetails?: string;
                } | null;
                _type: "citation";
                _key: string;
              }
            | {
                linkType?:
                  | "href"
                  | "mail"
                  | "project"
                  | "resourcePage"
                  | "staticpage";
                href: string | null;
                staticpage: "/" | "/about" | "/contact" | "/projects" | null;
                project: null;
                resourcePage: string | null;
                mail: string | null;
                openInNewTab: boolean | null;
                _type: "link";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        alignment: "left" | "right" | null;
        width?: "large" | "medium" | "small";
      }
  > | null;
} | null;
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]  {"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string | null;
}>;
// Variable: resourcePagesSlugs
// Query: *[_type == "resourcePage" && defined(slug.current)]  {"slug": slug.current}
export type ResourcePagesSlugsResult = Array<{
  slug: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "settings"][0]': SettingsQueryResult;
    '\n  *[_type == "aboutPage"][0] {\n    ...,\n    title,\n    description,\n    "content": content[]{\n          ...,\n          markDefs[]{\n            ...,\n            \n  _type == "link" => {\n    "resourcePage": resourcePage->slug.current,\n    "project": post->slug.current,\n    "href": href,\n    "staticpage": staticpage,\n    "mail": mail,\n    "openInNewTab": openInNewTab\n  }\n,\n            \n  _type == "citation" => {\n    ...,\n    citation-> {\n      ...,\n      _id,\n      citationNumber,\n      title\n    }\n  }\n,\n          }\n        }\n  }\n': AboutPageQueryResult;
    '\n  *[_type == "contactPage"][0] {\n    ...,\n    title,\n    description,\n    "content": content[]{\n      ...,\n      markDefs[]{\n        ...,\n        \n  _type == "link" => {\n    "resourcePage": resourcePage->slug.current,\n    "project": post->slug.current,\n    "href": href,\n    "staticpage": staticpage,\n    "mail": mail,\n    "openInNewTab": openInNewTab\n  }\n,\n        \n  _type == "citation" => {\n    ...,\n    citation-> {\n      ...,\n      _id,\n      citationNumber,\n      title\n    }\n  }\n,\n      }\n    },\n    image {\n      \n  ...,\n  "asset": asset {\n    _ref,\n    _type,\n    _type == \'reference\' => @-> {\n      url,\n      mimeType,\n      metadata {\n        lqip,\n        dimensions {\n          width,\n          height,\n          aspectRatio\n        }\n      }\n    }\n  }\n\n    }\n  }\n': ContactPageQueryResult;
    '\n  *[_type == "homePageSingleton"][0] {\n    "hero": hero[0] {\n      _type,\n      hero {\n        type,\n        fullWidth {\n          title,\n          tagline,\n          image {\n            \n  ...,\n  "asset": asset {\n    _ref,\n    _type,\n    _type == \'reference\' => @-> {\n      url,\n      mimeType,\n      metadata {\n        lqip,\n        dimensions {\n          width,\n          height,\n          aspectRatio\n        }\n      }\n    }\n  }\n\n          }\n        },\n        halfWidth {\n          title,\n          tagline,\n          image {\n            \n  ...,\n  "asset": asset {\n    _ref,\n    _type,\n    _type == \'reference\' => @-> {\n      url,\n      mimeType,\n      metadata {\n        lqip,\n        dimensions {\n          width,\n          height,\n          aspectRatio\n        }\n      }\n    }\n  }\n\n          }\n        },\n        video {\n          title,\n          tagline,\n          thumbnail {\n            \n  ...,\n  "asset": asset {\n    _ref,\n    _type,\n    _type == \'reference\' => @-> {\n      url,\n      mimeType,\n      metadata {\n        lqip,\n        dimensions {\n          width,\n          height,\n          aspectRatio\n        }\n      }\n    }\n  }\n\n          }\n        }\n      }\n    },\n    "carouselOne": carouselOne {\n      ...,\n        _type,\n        size,\n        indicators,\n        images[]{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    },\n    "historicalFacts": historicalFacts[]-> {\n      _id,\n      year,\n      title,\n      snippet\n    }\n  }\n': HomePageSingletonQueryResult;
    '\n  *[_type == \'resourcePage\' && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    heading,\n    subheading,\n    "pageBuilder": pageBuilder[]{\n      ...,\n      _type == "callToAction" => {\n        \n  link {\n      ...,\n      \n  _type == "link" => {\n    "resourcePage": resourcePage->slug.current,\n    "project": post->slug.current,\n    "href": href,\n    "staticpage": staticpage,\n    "mail": mail,\n    "openInNewTab": openInNewTab\n  }\n\n      }\n,\n      },\n      _type == "infoSection" => {\n        content[]{\n          ...,\n          markDefs[]{\n            ...,\n            \n  _type == "link" => {\n    "resourcePage": resourcePage->slug.current,\n    "project": post->slug.current,\n    "href": href,\n    "staticpage": staticpage,\n    "mail": mail,\n    "openInNewTab": openInNewTab\n  }\n,\n            \n  _type == "citation" => {\n    ...,\n    citation-> {\n      ...,\n      _id,\n      citationNumber,\n      title\n    }\n  }\n,\n          }\n        }\n      },\n      _type == "sourceGroup" => {\n        ...,\n        sources[]->{\n          ...,\n          _type == "source" => {\n            ...,\n          }\n        }\n      },\n      _type == "indigenousTranslationBlock" => {\n        _type,\n        _key,\n        heading,\n        description,\n        translations[]-> {\n          _type,\n          languageGroup {\n            name,\n            nativeName,\n            meaning,\n            translator\n          },\n          translations[] {\n            english,\n            indigenous\n          }\n        }\n      },\n    },\n  }\n': GetResourcePageQueryResult;
    '\n  *[\n    _type == "resourcePage" || \n    _type == "post" || \n    _type == "aboutPage" ||\n    _type == "contactPage" ||\n    _type == "homePageSingleton" ||\n    _type == "projectPage"\n  ] | order(_type asc) {\n    _type == "homePageSingleton" => {\n      "slug": "",\n      "_type": _type,\n      "_updatedAt": _updatedAt\n    },\n    _type == "aboutPage" => {\n      "slug": "about",\n      "_type": _type,\n      "_updatedAt": _updatedAt\n    },\n    _type == "contactPage" => {\n      "slug": "contact",\n      "_type": _type,\n      "_updatedAt": _updatedAt\n    },\n    _type == "projectPage" => {\n      "slug": "projects",\n      "_type": _type,\n      "_updatedAt": _updatedAt\n    },\n    _type in ["resourcePage", "post"] => {\n      "slug": slug.current,\n      "_type": _type,\n      "_updatedAt": _updatedAt\n    }\n  }\n': SitemapDataResult;
    '\n  *[_type == "books" && defined(slug.current == "all-books") ] {\n    title,\n    content[],\n    "books": books[]->{\n      ...,\n      image{\n        alt,\n        "asset": asset{\n          _ref,\n          _type == \'reference\' => @-> {\n      url,\n      metadata {\n        dimensions {\n          width,\n          height,\n          aspectRatio\n        }\n      }\n    }\n        }\n      }\n    }\n  }\n': AllBooksQueryResult;
    '\n  *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage{\n    ...,\n    "asset": asset{\n    _ref,\n    _type,\n    _type == \'reference\' => @->{\n      url,\n          mimeType,\n          metadata {\n              lqip,\n              dimensions {\n                width,\n                height,\n                aspectRatio\n              }\n      }\n    },\n    \n  }\n  },\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n  "category": category->{\n    name,\n    slug\n  },\n  "featured": featured,\n\n  }\n': AllPostsQueryResult;
    '\n  *[_type == "post" && featured == true && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage{\n    ...,\n    "asset": asset{\n    _ref,\n    _type,\n    _type == \'reference\' => @->{\n      url,\n          mimeType,\n          metadata {\n              lqip,\n              dimensions {\n                width,\n                height,\n                aspectRatio\n              }\n      }\n    },\n    \n  }\n  },\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n  "category": category->{\n    name,\n    slug\n  },\n  "featured": featured,\n\n  }\n': FeaturedPostsQueryResult;
    '\n  *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage{\n    ...,\n    "asset": asset{\n    _ref,\n    _type,\n    _type == \'reference\' => @->{\n      url,\n          mimeType,\n          metadata {\n              lqip,\n              dimensions {\n                width,\n                height,\n                aspectRatio\n              }\n      }\n    },\n    \n  }\n  },\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n  "category": category->{\n    name,\n    slug\n  },\n  "featured": featured,\n\n  }\n': MorePostsQueryResult;
    '\n  *[\n    _type == "post" && \n    defined(slug.current) && \n    _id != $skip &&\n    category->slug.current in ["mural-media", "iron-ridge-mural"]\n  ] {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage{\n    ...,\n    "asset": asset{\n    _ref,\n    _type,\n    _type == \'reference\' => @->{\n      url,\n          mimeType,\n          metadata {\n              lqip,\n              dimensions {\n                width,\n                height,\n                aspectRatio\n              }\n      }\n    },\n    \n  }\n  },\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n  "category": category->{\n    name,\n    slug\n  },\n  "featured": featured,\n\n  }\n': MuralMediaQueryResult;
    '\n  *[_type == "post" && slug.current == $slug] [0] {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage{\n    ...,\n    "asset": asset{\n    _ref,\n    _type,\n    _type == \'reference\' => @->{\n      url,\n          mimeType,\n          metadata {\n              lqip,\n              dimensions {\n                width,\n                height,\n                aspectRatio\n              }\n      }\n    },\n    \n  }\n  },\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n  "category": category->{\n    name,\n    slug\n  },\n  "featured": featured,\n\n  modules[]{\n      ...,\n      _type == "moduleBlock" => {\n        _type,\n        content[]{\n          ...,\n          markDefs[]{\n            ...,\n            \n  _type == "link" => {\n    "resourcePage": resourcePage->slug.current,\n    "project": post->slug.current,\n    "href": href,\n    "staticpage": staticpage,\n    "mail": mail,\n    "openInNewTab": openInNewTab\n  }\n,\n            \n  _type == "citation" => {\n    ...,\n    citation-> {\n      ...,\n      _id,\n      citationNumber,\n      title\n    }\n  }\n,\n          }\n        }\n      },\n      _type == "fullWidthImage" => {\n        _type,\n        caption,\n        image{\n          \n  ...,\n  "asset": asset {\n    _ref,\n    _type,\n    _type == \'reference\' => @-> {\n      url,\n      mimeType,\n      metadata {\n        lqip,\n        dimensions {\n          width,\n          height,\n          aspectRatio\n        }\n      }\n    }\n  }\n\n        },\n      },\n      _type == "textWrapImage" => {\n        _type,\n        content[]{\n          ...,\n          markDefs[]{\n            ...,\n            \n  _type == "link" => {\n    "resourcePage": resourcePage->slug.current,\n    "project": post->slug.current,\n    "href": href,\n    "staticpage": staticpage,\n    "mail": mail,\n    "openInNewTab": openInNewTab\n  }\n,\n            \n  _type == "citation" => {\n    ...,\n    citation-> {\n      ...,\n      _id,\n      citationNumber,\n      title\n    }\n  }\n,\n          }\n        },\n        alignment,\n        image{\n          \n  ...,\n  "asset": asset {\n    _ref,\n    _type,\n    _type == \'reference\' => @-> {\n      url,\n      mimeType,\n      metadata {\n        lqip,\n        dimensions {\n          width,\n          height,\n          aspectRatio\n        }\n      }\n    }\n  }\n\n        },\n      },\n      _type == "carouselOne" => {\n        ...,\n        _type,\n        size,\n        indicators,\n        images[]{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n\n      },\n      }\n      }\n    \n  \n': PostQueryResult;
    '\n  *[_type == "post" && defined(slug.current)]\n  {"slug": slug.current}\n': PostPagesSlugsResult;
    '\n  *[_type == "resourcePage" && defined(slug.current)]\n  {"slug": slug.current}\n': ResourcePagesSlugsResult;
  }
}
